<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Wouter J]]></title>
    <link href="http://wouterj.nl/atom.xml" rel="self"/>
    <link href="http://wouterj.nl/"/>
    <updated>2015-02-19T09:56:06+00:00</updated>
    <id>http://wouterj.nl/</id>
            <author>
            <name><![CDATA[Wouter de Jong]]></name>                    </author>
                <entry>
            <title type="html"><![CDATA[Using Travis to build your Sculpin blog]]></title>
            <link href="http://wouterj.nl/2015/02/using-travis-to-build-your-sculpin-blog"/>
            <updated>2015-02-17T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2015/02/using-travis-to-build-your-sculpin-blog</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">This static blog site is generated by <a href="http://sculpin.io/">Sculpin</a> and hosted on
<a href="https://pages.github.com/">GitHub Pages</a>. In this article, I'll tell you how you can setup automatic
generation using <a href="https://travis-ci.org/">Travis</a>.</p><div class="cf"></div>

<h2 id="the-publish-script"><a href="#the-publish-script" class="section-link">&#61544;</a>The Publish Script</h2>

<p>Generating a Sculpin site is basically executing some commands. Let's create a
<code>publish.sh</code> file which will execute all commands required to generate the
site:</p>

<pre class="prettyprint  linenums  lang-shell"><code class="shell"># build site
sass source/css/wouterj.scss:source/css/wouterj.css --style compressed --no-cache
./vendor/bin/sculpin generate --env prod
touch output_prod/.nojekyll
</code></pre>

<p>As this site uses Sass, it first needs to compile the sass code into a css
file. Then, Sculpin is used to generate the site for production. At last, a
<code>.nojekyll</code> file is created, to make sure GitHub Pages is not going to try to
render the site as a Jekyll blog.</p>

<p>To make Travis execute this file, you need some Travis configuration:</p>

<pre class="prettyprint  linenums  lang-yaml"><code class="yaml"># .travis.yml
language: php
php:
  - hhvm

sudo: false
cache:
  directories:
    - $HOME/.composer/cache

before_script:
  - gem install sass
  - composer install --prefer-dist

script:
  - sh publish.sh
</code></pre>

<p>The first 9 lines are setting up the quickest Travis PHP build: HHVM, caching,
Docker environment, etc. The lines after this install Sass and the dependencies
(yes, I commit <code>composer.lock</code>). The real Travis script executes the <code>publish.sh</code>
file.</p>

<p><aside class="side  side--note" data-type="note">Sculpin is added as a dependency in <code>composer.json</code> as shown under "Download
via Composer" on the <a href="https://sculpin.io/download/">download page</a>.</aside></p>

<h2 id="the-branching-strategy"><a href="#the-branching-strategy" class="section-link">&#61544;</a>The Branching Strategy</h2>

<p>The <code>master</code> branch is always used by GitHub Pages, so the source code is
pushed to a <code>source</code> branch. This branch is also set up as the default branch
on GitHub, as this is the only branch you should care about.</p>

<p>To make sure that Travis only runs builds on the <code>source</code> branch, use the
<code>branches.only</code> setting:</p>

<pre class="prettyprint  linenums  lang-yaml"><code class="yaml"># .travis.yml

# ...
branches:
  only:
    - source
</code></pre>

<h2 id="commiting-the-build"><a href="#commiting-the-build" class="section-link">&#61544;</a>Commiting the Build</h2>

<p>The idea now is to make Travis change the root of the repository to the
<code>output_prod</code> directory, commit and push it as the <code>master</code> branch. First, some
Git config is required:</p>

<pre class="prettyprint  linenums  lang-shell"><code class="shell"># publish.sh

# configure env
git config --global user.email 'your_email@example.com'
git config --global user.name 'WouterJ.nl bot'

# ... build site section
</code></pre>

<p>Since the build is executed on the <code>source</code> branch, Travis need to checkout the
<code>master</code> branch. However, as <code>master</code> is going to be replaced each time, it should
just delete current <code>master</code> and create a new one based on the <code>source</code> branch:</p>

<pre class="prettyprint  linenums  lang-shell"><code class="shell"># ... configure env section

# checkout publish branch
git branch -D master
git checkout -b master

# ... build site section
</code></pre>

<p>Travis is in the <code>master</code> branch and has build the site in <code>output_prod</code> now.
Git can make this output directory the new root of the branch using the <code>git
filter-branch</code> command. Before executing this, Travis has to commit the
currently added files (the <code>output_prod</code> directory):</p>

<pre class="prettyprint  linenums  lang-shell"><code class="shell"># .travis.yml

# ... configure env, checkout publish branch and build site sections

# commit build
git add -f output_prod
git commit -m "Build website"
</code></pre>

<p>The <code>-f</code> is required, as output directories are in the <code>.gitignore</code> file of
a common Sculpin blog. Now, execute the <code>git filter-branch</code> command:</p>

<pre class="prettyprint  linenums  lang-shell"><code class="shell"># .travis.yml

# ...

# only commit output dir
git filter-branch --subdirectory-filter output_prod/ -f
</code></pre>

<h2 id="pushing-the-result"><a href="#pushing-the-result" class="section-link">&#61544;</a>Pushing the Result</h2>

<p>The branch is ready to be pushed back to GitHub, so let's do that!</p>

<pre class="prettyprint  linenums  lang-shell"><code class="shell"># .travis.yml

# ...

# push to GitHub Pages
git push "https://github.com/WouterJ/wouterj.github.com" -f master
</code></pre>

<p>Wait a moment... It needs either a username and password or a GitHub token in
order to push. This means that everyone can see my GitHub token. That's a huge
security leak!</p>

<p>Fortunately, Travis allows you to encrypt the token in a special way that only
works for your repository. This way, you're the only person who can use this
token. Download the <a href="https://github.com/travis-ci/travis.rb">Travis command line app</a> and use the <code>travis encrypt</code>
command to encrypt your public token to an environment variable:</p>

<pre class="prettyprint  linenums"><code>$ travis encrypt --add GH_TOKEN=XXX
</code></pre>

<p>(<code>XXX</code> is your github token here).</p>

<p><aside class="side  side--caution" data-type="caution">Be sure to execute this when your in the directory of your blog repository.</aside></p>

<p>As the <code>--add</code> option was added, the encrypted string is added to your
<code>.travis.yml</code> configuration. Using this directly like
<code>git push http://$GH_TOKEN@github.com/...</code> will still show your github token in
the output of the command. You have to put it in the <code>~/.netrc</code> of the Linux
environment before executing this command. This file is used by Linux to
authenticate with ssh servers.</p>

<pre class="prettyprint  linenums  lang-yaml"><code class="yaml"># .travis.yml

# ...
before_install:
  - echo -e "machine github.com\n  login $GH_TOKEN" &gt;&gt; ~/.netrc
</code></pre>

<h2 id="round-up"><a href="#round-up" class="section-link">&#61544;</a>Round Up</h2>

<p>Congrats, you have a running Sculpin blog on GitHub Pages using automatic
buildings with Travis! Everytime you push to your blog's <code>source</code> branch, the
site will be regenerated. There are even more nice features:</p>

<ul><li>You get a notification when the build failed;</li>
<li>The output is never pushed when the build failed, meaning you always have a
working site.</li>
</ul><p>You can see the complete files in <a href="https://github.com/WouterJ/wouterj.github.com">the repository of this site</a>.</p></body></html>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Random in PHP]]></title>
            <link href="http://wouterj.nl/2013/09/random-in-php"/>
            <updated>2013-09-24T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2013/09/random-in-php</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">Een computer is logisch, hoe kan zo'n logisch apparaat nou random getallen
maken? Vandaag nemen we een kijk in de PHP source om te kijken hoe het in PHP
gedaan wordt.</p><div class="cf"></div>

<h2 id="de-php-source"><a href="#de-php-source" class="section-link">&#61544;</a>De PHP source</h2>

<p>De PHP source is geschreven in C en je kunt een hele makkelijk navigeerbare
weergave van de source op http://lxr.php.net/ vinden. Hier kun je zoeken naar
functies en makkelijk naar de source van functies navigeren.</p>

<p>Er is 1 basis conceptje die ik moet vertellen, de rest zal je gaanderweg wel
gaan begrijpen. Dit concept is defines in C. De C taal wordt eerst gecompiled
en vervolgens wordt die compiled code omgezet in uitvoerbare code. Tijdens het
compilen kun je wat dingen doe die PHP niet kan. Bijv. het gebruik van
defines. Defines zijn woorden die worden omgezet in de waarde die je er aan
meegeeft. Laten we beginnen met een simpele constante:</p>

<pre class="prettyprint  linenums"><code>#define M_PI 3.14159265358979323846
</code></pre>

<p>Wanneer we nu in onze code <code>M_PI</code> gebruiken wordt dit vervangen door dit
getal:</p>

<pre class="prettyprint  linenums"><code>long omtrek = M_PI * 4;
</code></pre>

<p>Hier staat na het compilen eigenlijk:</p>

<pre class="prettyprint  linenums"><code>long omtrek = 3.14159265358979323846 * 4;
</code></pre>

<p>Naast het invullen van getallen of strings kun je ook macro's defini&Atilde;&laquo;ren.
Bijvoorbeeld deze macro:</p>

<pre class="prettyprint  linenums"><code>#define INCREMENT(x) x++
</code></pre>

<p>Nu zal <code>INCREMENT(5)</code> worden omgezet in <code>6</code>.</p>

<h2 id="random-getallen"><a href="#random-getallen" class="section-link">&#61544;</a>Random getallen</h2>

<p>De andere basis kennis is het doorhebben hoe je random getallen maakt. Random
getallen zijn eigenlijk een sequence, je begint met een getal en stopt die in
een formule. Uit deze formule komt een getal, dit getal is het random getal en
die wordt opgeslagen in een variabele (dezelfde variabele als het begin
getal). Dit getal wordt dan weer gebruikt om met dezelfde functie weer een
getal te genereren, die ook weer wordt opgeslagen en als je de functie nog een
keer aanroept komt er weer een ander getal uit.</p>

<p>Je zal wel begrijpen dat je dan een hele rij van allemaal nieuwe random
getallen krijgt. Wanneer je met hetzelfde getal begint zal er altijd dezelfde
rij uitkomen. Dit eerste getal noemen we een <em>seed</em>. De seed wordt random
gecree&Atilde;&laquo;rd, bijvoorbeeld door de tijd en datum te gebruiken. Op deze manier heb
je dus nooit dezelfde random reeks getallen.</p>

<h2 id="de-rand-functie"><a href="#de-rand-functie" class="section-link">&#61544;</a>De <code>rand</code> functie</h2>

<p>Nu je de basiskennis hebt gaan we kijken in de PHP source code. De meeste
functies worden aangemaakt door <code>PHP_FUNCTION(rand)</code>. Als we opzoek willen
naar de <code>rand</code> functie zoeken we op <code>"PHP_FUNCTION rand"</code> (vergeet de quotes
niet). In de <a href="http://lxr.php.net/search?q=%22PHP_FUNCTION+rand%22&amp;defs=&amp;refs=&amp;path=&amp;hist=&amp;project=PHP_5_4">resultaten</a> krijgen we dan 2 bestanden: <code>php_math.h</code> en
<code>rand.c</code>. De <code>*.h</code> bestanden zijn header bestanden, die vertellen wat er
allemaal in de <code>*.c</code> bestanden staat. De <code>*.c</code> bestanden bevatten de echte
code. We klikken dus op die link en navigeren naar <a href="http://lxr.php.net/xref/PHP_5_4/ext/standard/rand.c#290">regel 290</a>:</p>

<pre class="prettyprint  linenums"><code>PHP_FUNCTION(rand)
{
    long min;
    long max;
    long number;
    int  argc = ZEND_NUM_ARGS();

    if (argc != 0 &amp;&amp; zend_parse_parameters(argc TSRMLS_CC, "ll", &amp;min, &amp;max) == FAILURE)
        return;

    number = php_rand(TSRMLS_C);
    if (argc == 2) {
        RAND_RANGE(number, min, max, PHP_RAND_MAX);
    }

    RETURN_LONG(number);
}
</code></pre>

<p>En dat is de functie!</p>

<h3 id="parsen-van-argumenten"><a href="#parsen-van-argumenten" class="section-link">&#61544;</a>Parsen van argumenten</h3>

<p>Als eerst zien we dat er 4 variabelen gedeclareerd worden:</p>

<pre class="prettyprint  linenums"><code>long min;
long max;
long number;
int  argc = ZEND_NUM_ARGS();
</code></pre>

<p>De eerste 3 variabelen zijn of argumenten of variabele die we verder in de
functie gaan gebruiken. De 4e variabele, <code>argc</code>, is het aantal argumenten.
Zend is de engine achter PHP en we kunnen wel raden wat <code>ZEND_NUM_ARGS()</code>
doet, we gaan dus niet naar die source code kijken.</p>

<p>Dan krijgen we een check voor de argumenten:</p>

<pre class="prettyprint  linenums"><code>if (argc != 0 &amp;&amp; zend_parse_parameters(argc TSRMLS_CC, "ll", &amp;min, &amp;max) == FAILURE)
    return;
</code></pre>

<p>De check <code>argc != 0</code> betekend dat we pas argumenten gaan checken als er
argumenten zijn, dit komt omdat de <code>rand</code> functie ook zonder argumenten
aangeroepen kan worden. Zodra er wel argumenten zijn moeten er meteen 2 zijn.
Met <code>zend_parse_parameters</code> parsen we de argumenten. We zien <code>"ll"</code>, dit
betekend dat beide argumenten <code>long</code> (een soort float) zijn. Daarachter zien
we <code>&amp;min</code> en <code>&amp;max</code>, dit betekend dat de waarde van de argumenten worden mee
gegeven aan de variabelen <code>min</code> en <code>max</code> (die we hiervoor al gedeclareerd
hadden).</p>

<h3 id="het-maken-van-de-seed"><a href="#het-maken-van-de-seed" class="section-link">&#61544;</a>Het maken van de seed</h3>

<p>Dan gaan we de seed maken:</p>

<pre class="prettyprint  linenums"><code>number = php_rand(TSRMLS_C);
</code></pre>

<p>In deze regel roepen we de functie <code>php_rand</code> (een interne functie die niet in
PHP bestaat) aan. Die geven we ook weer een waarde mee, die is voor nu even
niet interessant.</p>

<p>Wat wel interessant is hoe PHP die random seed maakt. Dus klikken we op de
functie <code>php_rand</code> om die source te bekijken:</p>

<pre class="prettyprint  linenums"><code>PHPAPI long php_rand(TSRMLS_D)
{
    long ret;

    if (!BG(rand_is_seeded)) {
        php_srand(GENERATE_SEED() TSRMLS_CC);
    }

#ifdef ZTS
    ret = php_rand_r(&amp;BG(rand_seed));
#else
# if defined(HAVE_RANDOM)
    ret = random();
# elif defined(HAVE_LRAND48)
    ret = lrand48();
# else
    ret = rand();
# endif
#endif

    return ret;
}
</code></pre>

<p>Wat we hier heel in het kort zien is dat de functie, afhankelijk van bepaalde
instellingen, de C functies <code>rand</code>, <code>lrand48</code> of <code>random</code> gebruikt.</p>

<h3 id="het-maken-van-het-random-getal"><a href="#het-maken-van-het-random-getal" class="section-link">&#61544;</a>Het maken van het random getal</h3>

<pre class="prettyprint  linenums"><code>if (argc == 2) {
    RAND_RANGE(number, min, max, PHP_RAND_MAX);
}
</code></pre>

<p>Zodra er 2 argumenten zijn gegeven wordt de <code>RAND_RANGE</code> define functie
gebruikt om het random nummer tussen 2 waardes te maken. Zodra je dus geen
argumenten geeft, krijg je gewoon de seed terug.</p>

<p>Nu zijn we natuurlijk benieuwd wat voor algoritme PHP gebruikt voor het maken
van het random getal, dus klikken we erop en gaan we naar een
<a href="http://lxr.php.net/xref/PHP_5_4/ext/standard/php_rand.h#43"><code>php_rand.h</code></a> bestand:</p>

<pre class="prettyprint  linenums"><code>#define RAND_RANGE(__n, __min, __max, __tmax) \
    (__n) = (__min) + (long) ((double) ( (double) (__max) - (__min) + 1.0) * ((__n) / ((__tmax) + 1.0)))
</code></pre>

<p>En dat is de magische formule achter PHP's <code>rand</code> functie! Er wordt mooi
gespeelt met wat afronden (de <code>(long)</code>'s en <code>(double)</code>'s in de code), de min
en max (<code>__min</code> en <code>__max</code>) worden een paar keer gebruikt en ook onze seed
(<code>__n</code>) wordt gebruikt. Vervolgens zien we ook <code>(__n) = ...</code>, waardoor onze
seed dus weer vernieuwd wordt door het gegenereerde random getal.</p>

<h3 id="het-returnen-van-het-getal"><a href="#het-returnen-van-het-getal" class="section-link">&#61544;</a>Het returnen van het getal</h3>

<p>Het enige dat ons nog rest is het returnen van de gemaakt <code>long</code>:</p>

<pre class="prettyprint  linenums"><code>RETURN_LONG(number);
</code></pre>

<p>Achter deze simpele regel zit weer heel wat zend gedoe, maar daar bemoeien we
ons vandaag niet mee.</p>

<h2 id="dus"><a href="#dus" class="section-link">&#61544;</a>Dus...</h2>

<p>Je hoofd duizeld nu van de C code, maar je hebt wel begrepen hoe je kan kijken
hoe PHP functies werken. Ook heb je geleerd dat een goede random functie 4
factoren heeft: Niet voorspelbaar; geen herhalend patroon; alle getallen
moeten ongeveer gelijk voorkomen; dezelfde seed zorgt voor dezelfde rij random
getallen.</p></body></html>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[CSS voor objecten]]></title>
            <link href="http://wouterj.nl/2013/09/css-voor-objecten"/>
            <updated>2013-09-01T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2013/09/css-voor-objecten</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">Dat je kunt programmeren in objecten is waarschijnlijk al bekent. Maar dat je
ook CSS in objecten kunt gebruiken is nog vrij nieuw. Tijd om dat eens te
ontdekken!</p><div class="cf"></div>

<h2 id="de-concepten"><a href="#de-concepten" class="section-link">&#61544;</a>De concepten</h2>

<h3 id="onderhoud"><a href="#onderhoud" class="section-link">&#61544;</a>Onderhoud</h3>

<p>Onderhoud, dat is een hele belangrijke factor in de scriptwereld. Sommige
mensen kiezen voor een korte ontwikkeltijd, met als nadeel dat je langer doet
over het onderhoud. Andere mensen kiezen voor een lange ontwikkeltijd,
waardoor je later sneller dingen kunt aanpassen. Die laatste methode is naar
mijn mening de beste, en daar probeer ik mijn lezers van te overtuigen.</p>

<h3 id="hergebruik"><a href="#hergebruik" class="section-link">&#61544;</a>Hergebruik</h3>

<p>CSS code kun je op sommige momenten heel makkelijk hergebruiken. Als ik
eenmaal een hele mooie button heb gemaakt kan ik die in al mijn toekomstige
projecten gebruiken. Eigenlijk zou dat zo moeten bij heel veel CSS dingen,
vind je niet? Stel je nou voor dat je later heel snel een webpagina kan maken,
doordat je alleen wat CSS scriptjes bij elkaar hoeft te voegen?</p>

<h3 id="overerving"><a href="#overerving" class="section-link">&#61544;</a>Overerving</h3>

<p>Nog zo'n typisch concept in zowel CSS als OO. De C in CSS staat voor
Cascading, overerving. Waarom zullen we daar dan geen gebruik van maken?</p>

<p>Het probleem is dat het vanuit je CSS file niet duidelijk is waarvan je dingen
overerft. Je moet in de HTML code kijken naar de klassen, het element en zijn
parents.</p>

<h2 id="werk-niet-met-elementen-en-ids"><a href="#werk-niet-met-elementen-en-ids" class="section-link">&#61544;</a>Werk NIET met elementen en IDs</h2>

<p>De oplossing is om niet te werken met element selectoren of IDs. Stel je nou
voor dat je een <code>&lt;header&gt;</code> element stijlt, zodat hij er goed uitziet als
pagina header. Een maandje later kom je er achter dat je deze header tag ook
wilt gebruiken voor de header van een artikel. Ai, daar heb je een probleem.
Die krijgt nu ook al die stijlen van de pagina header mee.</p>

<p>Het kan ook andersom. Je maakt een footer en die stijl je met het id
<code>#footer</code>. Alles ziet er mooi uit en nu wil je ook dezelfde stijlen gebruiken
voor de footer in een post. Ga je nu alle CSS code kopieren?</p>

<h3 id="werk-wel-met-classes"><a href="#werk-wel-met-classes" class="section-link">&#61544;</a>Werk WEL met classes</h3>

<p>De oplossing is het gebruik van classes. Hiermee limiteer je jezelf niet tot
bepaalde elementen, of het maar 1 keer mogen voorkomen in een pagina. Als ik
de stijlen voor een button wil gebruiken in mijn header dan moet ik vrij
genoeg zijn om dat te mogen doen.</p>

<h4 id="quasi-qualified-selectors"><a href="#quasi-qualified-selectors" class="section-link">&#61544;</a>Quasi-qualified selectors</h4>

<p>om ons niet te limiteren op bepaalde elementen, maar om toch aan te geven bij
welk element deze klasse hoort kun je
<a href="http://csswizardry.com/2012/07/quasi-qualified-css-selectors/">quasi-qualified selectors</a>
gebruiken. Stel we hebben dit:</p>

<pre class="prettyprint  linenums  lang-css"><code class="css">article.featured{
    /* ... */
}
</code></pre>

<p>Nu kunnen we de <code>.featured</code> class alleen op een <code>&lt;article&gt;</code> element gebruiken.
Maar misschien wil ik later wel helemaal geen pagina op de homepagina, maar
wil ik bijv. een <code>&lt;section&gt;</code> of <code>&lt;img&gt;</code> element deze class meegeven.</p>

<p>Om toch aan te geven dat hij bij een <code>article</code> element hoort, maar om hem niet
te limiteren op dit element, plaatsen we de selector in een comment:</p>

<pre class="prettyprint  linenums  lang-css"><code class="css">/*article*/.featured{
    /* ... */
}
</code></pre>

<p>Voor CSS is dit nu gewoon een <code>.featured</code> class, maar voor de lezer wordt dit
gezien als een <code>.featured</code> class op een <code>article</code> element: Het is
quasi-qualified.</p>

<h2 id="de-bem-techniek"><a href="#de-bem-techniek" class="section-link">&#61544;</a>De BEM techniek</h2>

<p>Het basis concept van objecten in CSS wordt
<a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM</a>
genoemd. Dit staat voor <b>B</b>lock, <b>E</b>lement, <b>M</b>odifier.</p>

<p>Ik ga een voorbeeld laten zien van deze techniek doormiddel van deze HTML
code:</p>

<pre class="prettyprint  linenums"><code>&lt;article&gt;
    &lt;header&gt;
        &lt;h1&gt;Hello World&lt;/h1&gt;
        &lt;img src="img/thumbs/hello-world.png"&gt;
    &lt;/header&gt;
    &lt;article&gt;
        &lt;!-- ... --&gt;
    &lt;/article&gt;
    &lt;footer&gt;
        &lt;p&gt;Geplaatst in &lt;a href="..."&gt;Nieuws&lt;/a&gt;&lt;/p&gt;

        &lt;nav&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href="..."&gt;Tweet&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="..."&gt;like&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="..."&gt;+1&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/nav&gt;
&lt;/article&gt;
</code></pre>

<p>Een Block is het hoofdobject, in ons geval is dit een post. We geven onze
article element dus een <code>post</code> class mee:</p>

<pre class="prettyprint  linenums"><code>&lt;article class=post&gt;
    &lt;!-- ... --&gt;
&lt;/article&gt;
</code></pre>

<p>Een Block heeft children. In ons geval heeft hij een header, body en footer.
Dit zijn de Elementen. De conventie voor een element class naam is
<code>block__element</code> (2 underscores). In ons geval wordt het bijvoorbeeld
<code>post__header</code>:</p>

<pre class="prettyprint  linenums"><code>&lt;article class=post&gt;
    &lt;header class=post__header&gt;
        &lt;!-- ... --&gt;
    &lt;/header&gt;
    &lt;article class=post__body&gt;
        &lt;!-- ... --&gt;
    &lt;/article&gt;
    &lt;footer class=post__footer&gt;
        &lt;!-- ... --&gt;
    &lt;/footer&gt;
&lt;/article&gt;
</code></pre>

<p>Deze Elementen hebben ook weer children. Dit zijn ook allemaal Elementen van
de post, we hebben een <code>post__title</code>, <code>post__tumbnail</code>, ect.:</p>

<pre class="prettyprint  linenums"><code>&lt;article class=post&gt;
    &lt;header class=post__header&gt;
        &lt;h1 class=post__title&gt;Hello World&lt;/h1&gt;
        &lt;img class=post__thumbnail src="img/thumbs/hello-world.png"&gt;
    &lt;/header&gt;
    &lt;article class=post__body&gt;
        &lt;!-- ... --&gt;
    &lt;/article&gt;
    &lt;footer class=post__footer&gt;
        &lt;p class=post__meta&gt;Geplaatst in &lt;a href="..."&gt;Nieuws&lt;/a&gt;&lt;/p&gt;

        &lt;nav class=post__social&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href="..."&gt;Tweet&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="..."&gt;like&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="..."&gt;+1&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/nav&gt;
    &lt;/footer&gt;
&lt;/article&gt;
</code></pre>

<p>Dan hebben we als laatst nog een Modifier. Dit betekend dat het een Block is,
die net wat anders is als de vorige block. Als je bijv. op de hompagina van
deze website kijkt zie je dat het nieuwste bericht groter is. Het is een
uitbereiding van de overige nieuwsblokjes. Dit wordt gedaan doormiddel van een
modifier.</p>

<p>Zodra je aan een element een Modifier meegeeft geef je ook altijd de Block
mee. Want, zoals ik in het begin al verkondigde, we moeten gebruiken maken van
de Cascade.</p>

<p>Een Modifier gebruikt als conventie <code>block--modifier</code>. In ons geval wordt dit
waarschijnlijk <code>post--latest</code>:</p>

<pre class="prettyprint  linenums"><code>&lt;article class="post  post--latest"&gt;
    &lt;!-- ... --&gt;
&lt;/article&gt;

&lt;article class=post&gt;
    &lt;!-- ... --&gt;
&lt;/article&gt;
</code></pre>

<p><aside class="side  side--note" data-type="note">Een opmerkzame lezer zal zien dat ik 2 spaties tussen de classnamen heb
geplaatst. Hierdoor kun je snel zien wat de classnamen zijn, met 1 spatie
staan ze te dicht op elkaar om het snel te kunnen zien.</aside></p>

<h2 id="harry-roberts-en-inuit-css"><a href="#harry-roberts-en-inuit-css" class="section-link">&#61544;</a>Harry Roberts en Inuit.css</h2>

<p>Voordat ik stop met schrijven wil ik jullie kennis laten maken met
<a href="http://csswizardry.com/">Harry Roberts</a> en zijn framework
<a href="http://inuitcss.com/">Inuit.css</a>.</p>

<p>Harry Roberts is een van de actieve front-end developers die strijden voor het
gebruik van BEM. Hij heeft 2 jaar gewerkt aan grote websites en heeft daardoor
een hele interessante kijk op CSS. Het loont zeker de moeite om zijn artikelen
te lezen.</p>

<p>Daarnaast heeft hij Inuit.CSS gemaakt. Een framework die werkt via het BEM
principe en zijn meeste andere idee&Atilde;&laquo;n. Deze blog is ook gemaakt via Inuit.CSS
en de code hiervan kun je
<a href="https://github.com/WouterJ/wouterj.github.com">bekijken</a>.</p></body></html>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Hoe leer ik Symfony2?]]></title>
            <link href="http://wouterj.nl/2012/12/hoe-leer-ik-symfony2"/>
            <updated>2012-12-28T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2012/12/hoe-leer-ik-symfony2</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">Symfony2, ik ben er een groot fan van. Deze blogpost bevat een makkelijk weg
om Symfony2 te leren als je alleen nog maar PHP ervaring hebt.</p><div class="cf"></div>

<h2 id="stappen"><a href="#stappen" class="section-link">&#61544;</a>Stappen</h2>

<p>Symfony2 leer je in stappen. Je begint met een introductie, vervolgens kun je
beslissen of je door wilt gaan, dan ga je wat dieper de stof in en kun je al
beginnen met je eerste Symfony2 applicaties. Daarna kun je nog dieper de stof
in, extra dingen leren en zelfs de Symfony2 code in kijken.</p>

<h2 id="voorkennis"><a href="#voorkennis" class="section-link">&#61544;</a>Voorkennis</h2>

<p>Het is goed om al OO kennis te hebben. De OO syntax in PHP moet je sowieso goed
beheersen, maar het OO denken kan ook goed van pas komen.</p>

<p>Symfony2 maakt gebruik van de nieuwste methodes en technieken, sommige zul je
gaandeweg wel leren (zoals Dependency Injection), maar andere moet nu al paraat
hebben. De belangrijkste daarvan is de namespaces ondersteuning in PHP.</p>

<p>Als je compleet nieuw bent in OO raad ik je aan Symfony2 nog even weg te
leggen. Leer eerst <a href="http://wouterj.nl/serie/orienteer-je-in-objecten/">het OO denken</a>
en <a href="http://phptuts.nl/view/45/">de OO syntax</a>. Daarna moet je eerst daarmee wat
gaan spelen. Lees ook eens
<a href="http://symfony.com/doc/2.0/book/from_flat_php_to_symfony2.html">From flat PHP to Symfony2</a>,
hierin laten we je de concrete voordelen zien van een framework.</p>

<p>Als je net begint met frameworks zul je het gevoel hebben dat je door het
framework erg beperkt wordt in wat je kan (dit is natuurlijk niet zo). Daarom
kan het soms beter zijn om een stapje terug te doen en te gaan werken met een
Micro framework. Ik raad dan aan om <a href="http://silex.sensiolabs.org">Silex</a> te
gaan gebruiken. Deze is erg simpel en gemaakt door het Symfony2 team. Hierdoor
kom je al in aanraking met componenten en technieken in Symfony2, waardoor de
overstap naar Symfony2 makkelijker wordt.</p>

<h2 id="stap-1-de-kennismaking"><a href="#stap-1-de-kennismaking" class="section-link">&#61544;</a>Stap 1: De kennismaking</h2>

<p>Ok&Atilde;&copy;, je bent klaar om te beginnen met Symfony2. Tijd om Symfony2 eens voor te
stellen en te beslissen of je het een leuk framework vindt. Lees hiervoor de
<a href="http://symfony.com/doc/current/quick_tour/">quick tour</a> in de Symfony2
documentatie.  Deze serie bestaat uit 4 hoofdstukken van ong. 10 minuten
leestijd. Daarin wordt je alle basis uitgelegd die je nodig hebt voor een
Symfony2 applicatie.  Je kunt na deze tutorial al beginnen aan je eigen
applicatie.</p>

<h2 id="stap-2-dieper-in-de-stof"><a href="#stap-2-dieper-in-de-stof" class="section-link">&#61544;</a>Stap 2: Dieper in de stof</h2>

<p>Nu je hebt besloten door te gaan met Symfony2 kun je beginnen aan
"<a href="http://symfony.com/doc/current/book/">the book</a>". Dit is de bijbel voor
Symfony2 developers, dit legt echt alles uit wat je nodig hebt tot het maken
van volledige applicaties. Het is een ideale serie voor beginners, maar ook
experts verwijzen er nog regelmatig even naar om even je kennis op te frissen.</p>

<p>Lees deze serie zeker niet in 1 keer door. Begin met het lezen van het eerste
hoofdstuk, <em>"Symfony2 and HTTP fundamentals"</em> en lees alle volgende
hoofdstukken wanneer je het nodig hebt.</p>

<p>Begin bijv. met het maken van een pastbin systeem. Dan moet je eerst Symfony2
installeren, hiervoor lees je <em>"Installing and Configuring Symfony"</em>.
Nadat je dit hebt gedaan ga je aan de slag met je eerste pagina, je leest dan
<em>"Creating Pages in Symfony2"</em>. Daarvoor heb je routing en controller
kennis voor nodig, lees die pagina's ook. Ook moet je templates kunnen maken,
dus begin je ook aan die pagina. Ga zo langzamerhand de hele serie af.</p>

<h2 id="stap-3-klaar-voor-het-echte-werk"><a href="#stap-3-klaar-voor-het-echte-werk" class="section-link">&#61544;</a>Stap 3: Klaar voor het echte werk!</h2>

<p>Nu je eerste applicatie af is en je alle nuttige hoofdstukken van <em>The book</em>
hebt gelezen kun je ook nog de andere hoofdstukken lezen, vooral <em>"Service
Container"</em> en <em>"Testing"</em> raad ik aan te lezen.</p>

<p>Nu kun je in principe beginnen aan het echte werk. Begin met je eigen projecten
en kijk hoever je komt. De Symfony2 documentatie bevat nog een laatste serie
waar je zeker nog even naar moet kijken:
"<a href="http://symfony.com/doc/current/cookbook/">The cookbook</a>". Hierin staat
allemaal side-informatie, allemaal dingen die je kunt doen met Symfony2, extra
tips en nog veel meer.</p>

<h2 id="stap-4-duik-de-code-in"><a href="#stap-4-duik-de-code-in" class="section-link">&#61544;</a>Stap 4: Duik de code in</h2>

<p>Als laatste raad ik je aan de code in te duiken. Functies gebruiken zonder te
weten wat er nou eigenlijk gebeurd is iets wat ik verafschuw. De Symfony2 code
staat onder <code>vendor/symfony/symfony/src/Symfony</code>. Symfony2 bevat 3
verschillende typen klassen:</p>

<ul><li><p><strong>Componenten</strong> - Dit zijn losse componenten die je kunt gebruiken in alle
applicaties, deze zijn niet gebouwd voor Symfony2 alleen. Je zult zien dat het
meeste deel van Symfony2 bestaat uit deze componenten. Om alles te leren over
deze componenten kun je kijken in
"<a href="http://symfony.com/doc/current/components/">The components</a>" serie.</p></li>
<li><p><strong>Bridges</strong> - Vervolgens heb je de bridge klassen. Dit zijn klassen die een
component of 3th party library implementeren in Symfony2. Zo heb je bijv. een
TwigBridge die voor Twig ondersteuning in Symfony2 zorgt.</p></li>
<li><p><strong>Bundles</strong> - Dan heb je nog de core bundles, met als belangrijkste de
SymfonyFrameworkBundle. Deze zorgen dat de Bridges en Componenten gecombineerd
worden tot 1 geweldig framework: Symfony2.</p></li>
</ul><h2 id="extra-tips"><a href="#extra-tips" class="section-link">&#61544;</a>Extra tips</h2>

<p>Na 1.5 jaar werken met Symfony2 heb ik hier nog wat extra tips voor je:</p>

<ul><li><p>Composer is de tool die je moet gebruiken met Symfony2. Leer meer van deze
tool in "<a href="http://wouterj.nl/php/werken-met-composer/509/">Werken met Composer</a>".</p></li>
<li><p>Gebruik bundles. Je kan zelf alles maken, maar waarom het wiel uitvinden als
er al geweldige bundles voor gemaakt zijn? Zoek eens op
<a href="http://knpbundles.com/">KnpBundles</a> naar bundles, daar staan hele goede
tussen.
Enkele die ik bijna in elke applicatie gebruik zijn
<a href="http://knpbundles.com/KnpLabs/KnpMenuBundle">KnpMenuBundle</a>,
<a href="http://knpbundles.com/FriendsOfSymfony/FOSUserBundle">FOSUserBundle</a> en
<a href="http://knpbundles.com/sonata-project/SonataAdminBundle">SonataAdminBundle</a>.</p>

<p>Enkele teams die vaak terugkomen en bekend staan om hun bundles zijn KnpLabs
(Knp), Friend Of Symfony (FOS), Sonata Project (Sonata) en Johannes Schmitt
(Jms).</p></li>
</ul><h2 id="veel-succes"><a href="#veel-succes" class="section-link">&#61544;</a>Veel succes!</h2>

<p>Nu ben je helemaal klaar om te beginnen met het leren van Symfony2, doe het
rustig aan, doe het goed en je leerd de mooie kant van PHP kennen. Het is bijna
zeker dat je vragen zult krijgen. Deze kun je altijd op diverse plekken vragen:</p>

<ul><li>De <a href="https://groups.google.com/forum/?fromgroups=#!forum/symfony2">Symfony2 User Group</a></li>
<li>Op <a href="http://stackoverflow.com/questions/tagged/symfony2">Stackoverflow</a> (vergeet niet je vraag te taggen met <em>symfony2</em>)</li>
<li>Op <a href="http://phphulp.nl/">PHPhulp</a></li>
<li>En natuurlijk door een mailtje te sturen naar wouter{at}wouterj{dot}nl of
door mij te contacteren via PHPhulp.</li>
</ul></body></html>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Community: Bedankt!]]></title>
            <link href="http://wouterj.nl/2012/12/community-bedankt"/>
            <updated>2012-12-25T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2012/12/community-bedankt</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">Het is vandaag weer kerst. Tijd om na te denken over wat je dit jaar gedaan
hebt, wat je volgend jaar wilt doen en wie je allemaal moet bedanken.</p><div class="cf"></div>

<h2 id="open-source-bedankt"><a href="#open-source-bedankt" class="section-link">&#61544;</a>Open source bedankt</h2>

<p>Webdevelopment kost geld,
<a href="http://css-tricks.com/web-developer-economics-hardware-costs/">daar is Chris Coyier achter gekomen</a>.
Ik ben het daar niet mee eens. Naast een lap-top van 6 jaar oud heb ik namelijk
nog 0 euro besteed aan webdevelopment.</p>

<p>Open source is naar mijn mening het hoogtepunt in de developwereld. Ik gebruik,
nee wij gebruiken, het veel. Bekijk deze website alleen al: Hij draait op
<a href="http://wordpress.org/">WordPress</a>, die vervolgens weer plugins als
<a href="http://wysija.com">Wysija</a> en <a href="http://wordpress.org/extend/plugins/organize-series/">Organize
Series</a>.  De template heb
ik gemaakt in de gratis <a href="http://www.vim.org/">vim editor</a>, uitgebreid met
enkele open source plugins. Ik gebruik <a href="http://git-scm.com/">GIT</a> als version
controll systeem. De website is gratis aangeboden door <a href="http://boevewebdesign.nl/">Boeve
Webdesign</a> en mijn berichten schrijf ik in WordPad.</p>

<p>Het volgende design is gemaakt met <a href="http://inuitcss.com">Inuit.css</a> en gebruikt
<a href="http://sass-lang.com/">Sass</a> als CSS preprocessor.</p>

<p>Mijn kennis doe ik op door gratis blogs en gratis video's van conferenties of
bijv. <a href="http://www.youtube.com/user/googledevelopers">Google Developers</a>.</p>

<p>Daarnaast ben ik dagelijks bezig met het Symfony2 Framework, de documentatie en
alles wat eromheen zit, de helft van mijn dag allemaal aan open source,
heerlijk!</p>

<h2 id="lezers-bedankt"><a href="#lezers-bedankt" class="section-link">&#61544;</a>Lezers bedankt</h2>

<p>Maar ook jij, jij de lezer, wil ik bedanken voor het lezen van mijn blog!  Na 2
maanden afwezigheid van blog artikelen hebben jullie het gemiddelde van
40 bezoekers per dag en 80 (spam) reacties goed vast gehouden.</p>

<h2 id="prettig-kerstfeest-en-een-gelukkig-nieuwjaar"><a href="#prettig-kerstfeest-en-een-gelukkig-nieuwjaar" class="section-link">&#61544;</a>Prettig kerstfeest en een gelukkig nieuwjaar!</h2>

<p>Ik wens jullie allemaal een prettig kerstfeest vandaag en morgen.
<a href="https://twitter.com/donttrythis/status/282155927778492416">De wereld is niet ge&Atilde;&laquo;ndigd</a>
dus veel succes in 2013! Mijn goede voornemens ga je in de loop naar het oude
jaar nog wel lezen.</p></body></html>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Wat de nieuwsbrief niet haalde]]></title>
            <link href="http://wouterj.nl/2012/10/wat-de-nieuwsbrief-niet-haalde"/>
            <updated>2012-10-01T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2012/10/wat-de-nieuwsbrief-niet-haalde</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">Elke maand heb ik teveel linkjes om allemaal in de nieuwsbrief te stoppen. Het
is zonde als deze linkjes het zwarte gat in gaan, daarom post ik elke maand een
blogpost met de linkjes die dit keer niet in de nieuwsbrief paste.</p><div class="cf"></div>

<h2 id="aanmelden-voor-de-nieuwsbrief"><a href="#aanmelden-voor-de-nieuwsbrief" class="section-link">&#61544;</a>Aanmelden voor de nieuwsbrief</h2>

<p>De nieuwsbrief is zojuist de deur uit gegaan. Baal je omdat je hem ook wou
ontvangen maar je hebt jezelf nog niet opgegeven? Geen zorgen, tot zaterdag kun
je je nog opgeven en de nieuwsbrief van deze maand ontvangen.</p>

<h2 id="de-linkjes"><a href="#de-linkjes" class="section-link">&#61544;</a>De linkjes</h2>

<h3 id="front-end"><a href="#front-end" class="section-link">&#61544;</a>Front-end</h3>

<ul><li><a href="http://coding.smashingmagazine.com/2012/10/09/designing-javascript-apis-usability/">Designing Better JavaScript APIs</a></li>
<li><a href="http://html5doctor.com/outlines/">Document Outlines in HTML5</a></li>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/getting-started-with-html-emails/">Getting Started with HTML emails</a></li>
<li><a href="http://webreflection.blogspot.co.uk/2012/10/javascript-made-everyone-crazy.html">JavaScript Made everyone crazy</a></li>
<li><a href="http://csswizardry.com/2011/09/the-nav-abstraction/">The Nav Abstraction</a></li>
<li><a href="http://laurakalbag.com/grids-flexibility-and-responsiveness/">Grids, flexibility and responsiveness</a></li>
<li><a href="http://tweetdeck.posterous.com/designing-the-new-tweetdeck">Designing the new TweetDeck</a></li>
<li><a href="http://www.nczonline.net/blog/2012/10/16/does-javascript-need-classes/">Does JavaScript need classes?</a></li>
<li><a href="http://johanbrook.com/design/css/debugging-css-media-queries/">Debugging CSS Media Queries</a></li>
<li><a href="http://hansmuller-webkit.blogspot.nl/2012/10/experimental-css-exclusions-shape.html">Experimental CSS exclusions shape</a></li>
</ul><h3 id="back-end"><a href="#back-end" class="section-link">&#61544;</a>Back-end</h3>

<ul><li><a href="http://symfony.com/blog/a-new-release-process-for-symfony">A new Release Process for Symfony</a></li>
</ul><h3 id="overig"><a href="#overig" class="section-link">&#61544;</a>Overig</h3>

<ul><li><a href="http://www.seomoz.org/blog/how-many-seo-consultants-actually-know-what-theyre-talking-about">How many SEO consultants actually know what they're talking about?</a></li>
<li><a href="http://www.netmagazine.com/features/33-fantastic-chrome-extensions">33 fantastic Chrome extensions</a></li>
<li><a href="http://www.google.com/about/datacenters/">Google Data Centers</a></li>
</ul></body></html>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Abonneer op de nieuwsbrief!]]></title>
            <link href="http://wouterj.nl/2012/09/abonneer-op-de-nieuwsbrief"/>
            <updated>2012-09-24T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2012/09/abonneer-op-de-nieuwsbrief</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">Er gebeurd enorm veel op het gebied van webdevelopment. Van nieuwe technieken
tot nieuwe tools en van nieuwe versies tot nieuwe blogposts. Meld je aan op de
nieuwsbrief en blijf op de hoogte!</p><div class="cf"></div>

<h2 id="wouter-s-monthly-marks"><a href="#wouter-s-monthly-marks" class="section-link">&#61544;</a>Wouter's Monthly Marks</h2>

<p>Mijn maandelijkse bookmarks, zo heet de nieuwsbrief die ik deze maand ga
starten. Hierin plaats ik ongeveer 10 bookmarks van de afgelopen maand en
schrijf ik een stukje over de gebeurtenissen deze maand. Deze nieuwsbrief zal
elke laatste dag van de maand uitkomen.</p>

<h3 id="front-end-en-back-end"><a href="#front-end-en-back-end" class="section-link">&#61544;</a>Front-end en back-end</h3>

<p>Mijn blog is een lekkere middenmotor die zich richt op de 2 aspecten van een
website: Front-end en back-end. Ook de nieuwsbrief zou gaan over alle bij de
aspecten. Maar wees gerust, als je je niet verdiept in back-end blijft er
genoeg informatie over de front-end over.</p>

<h2 id="aanmelden"><a href="#aanmelden" class="section-link">&#61544;</a>Aanmelden</h2>

<p>De rede dat ik deze blogpost zo laat stuur is omdat het aanmelden niet goed
ging. Dit gaat helaas nog steeds fout. Om je aan te melden stuur je een mailtje
naar nieuwsbrief@wouterj.nl met de vermelding van je naam en het email adres
waarop je de nieuwsbrief wilt ontvangen. Mijn exuceses voor deze vreemde
aanmeld procedure, ik probeer het beter te maken.</p>

<h2 id="wysija"><a href="#wysija" class="section-link">&#61544;</a>Wysija</h2>

<p>What You Send Is Just Awsome. Dat is de naam van de wordpress plugin die ik
hierbij erg wil bedanken voor het makkelijk maken van een nieuwsbrief. Voor
iedereen een echte aanrader!</p></body></html>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Webplatform.org gelanceerd]]></title>
            <link href="http://wouterj.nl/2012/09/webplatformorg-gelanceerd"/>
            <updated>2012-09-08T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2012/09/webplatformorg-gelanceerd</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">Vanmiddag is <a href="http://webplatform.org/">WebPlatform.org</a> gelanceerd, de website
is een nieuwe samenwerking tussen groten partijen in de ontwikkeling van het
web. Het is bedoelt om de grootste en beste documentatie voor het web te
worden.</p><div class="cf"></div>

<p>Web Platform zal grote documentatie&Acirc;&#146;s als Mozilla Developers Network en Google
Developers combineren, samen met de krachten en kennis van kleinere bedrijven
in deze webwereld, om zo de grootste bron van kennis en tutorials te worden
voor beginners en ervaren mensen.</p>

<p>WebPlatform is opgericht door W3C en wordt momenteel beheerd door 10
&Acirc;&#145;stewards&Acirc;&#146;, de naam voor beheerders op WebPlatform. Deze zijn: Adobe, Apple,
Facebook, Google, HP, MicroSoft, Mozilla, Nokia en Opera.</p>

<h2 id="alpha"><a href="#alpha" class="section-link">&#61544;</a>Alpha</h2>

<p>De documentatie is momenteel in alpha fase en er zal nog veel werk verricht
moeten worden om de documentatie groots te maken, maar de plannen zijn goed. De
meeste tutorials van MDN zullen worden overgenomen en veel andere bedrijven
hebben mannen binnen gebracht om mee te helpen.</p>

<h3 id="ook-jij-kunt-helpen"><a href="#ook-jij-kunt-helpen" class="section-link">&#61544;</a>Ook jij kunt helpen!</h3>

<p>WebPlatform is een open source wiki systeem waardoor iedereen kan helpen. Zie
je een fout of wil je iets nieuws documenteren? Dan kun je dat doen! Het zal
dan gecontroleerd worden door de stewards en vervolgens online komen.</p>

<h2 id="ban-w3schools"><a href="#ban-w3schools" class="section-link">&#61544;</a>Ban W3schools</h2>

<p>W3Schools is tot nu toe altijd de meest bekende en uitgebreide documentatie
geweest voor beginners. Helaas staat W3Schools vol met fouten en wordt het
altijd in verband gebracht met W3C, iets wat niet zo is. WebPlatform wordt
waarschijnlijk een van de eerste documentaties die kan opboksen tegen
W3Schools.</p>

<p>Ook zal het de eerste persoonvriendelijke documentatie van W3C worden. Hierdoor
zal het minder waarschijnlijk worden dat er verwarring optreedt tussen de
relatie W3C &lt;&gt; W3Schools</p></body></html>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Eindelijk is jQuery UI 1.9 een feit]]></title>
            <link href="http://wouterj.nl/2012/09/eindelijk-is-jquery-ui-19-een-feit"/>
            <updated>2012-09-08T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2012/09/eindelijk-is-jquery-ui-19-een-feit</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">Er is lang op gewacht, maar vandaag is hij uitgekomen:
<a href="http://blog.jqueryui.com/2012/10/jquery-ui-1-9-0/">versie 1.9 van jQuery UI</a>.
Het is een grote stap richting het doel voor een duidelijkere API.</p><div class="cf"></div>

<h2 id="wat-is-jquery-ui"><a href="#wat-is-jquery-ui" class="section-link">&#61544;</a>Wat is jQuery UI?</h2>

<p>Voor de lezers die jQuery UI niet kennen, het is de User Interface API van
jQuery. Het is een uitbereiding van de jQuery libary met een aantal handige
functies en een stylesheet voor standaard stijlen. Sommige veel gebruikte
jQuery plugins zijn verbeterd en geplaatst in deze UI API. Hierdoor bevat het
geweldige functies voor accordion menu&Acirc;&#146;s, demo&Acirc;&#146;s, effecten en veel meer.</p>

<h2 id="het-redesingen-van-de-api"><a href="#het-redesingen-van-de-api" class="section-link">&#61544;</a>Het redesingen van de API</h2>

<p>Zoals je net las is de API ontstaan uit verschillende bronnen. Hierdoor was de
API rommelig en waren er verschillen tussen dingen waar geen verschil hoorden
te zijn.
<a href="http://blog.jqueryui.com/2011/03/api-redesigns-the-past-present-and-future/">Het jQuery UI team</a>
stelde zelf een doel deze API gelijk te maken en te zorgen dat hij zo
gebruikersvriendelijk als mogelijk is.</p>

<p>In versie 1.9 is hier veel aandacht aan besteed en daardoor zijn de API&Acirc;&#146;s van
<a href="http://forum.jquery.com/topic/accordion-api-redesign">de accordion</a>,
<a href="http://forum.jquery.com/topic/tabs-api-redesign">taps</a> en
<a href="http://forum.jquery.com/topic/position-api-redesign">position</a> compleet
herschreven.</p>

<h3 id="deprecated"><a href="#deprecated" class="section-link">&#61544;</a>Deprecated</h3>

<p>Herschrijven van functies zorgt ervoor dat de oude niet meer gebruikt moeten
worden. Vele functies zijn dan ook deprecated. In jQuery UI 1.9 wordt je dan
gewaarschuwd als je een van die functies gebruikt, maar het zal nog gewoon
werken. Vanaf jQuery 1.10 zullen de functies verwijderd worden. Hierdoor kun je
je scripts nu al klaar maken voor jQuery 1.10.</p>

<p>Mocht je de flags niet willen kun je deze uitzetten kun je deze code gebruiken,
waarbij je zelf de juiste paden naar de code moet neerzetten:</p>

<pre class="prettyprint  linenums"><code>&lt;script src=".../jquery.js"&gt;&lt;/script&gt;
&lt;script&gt;$.uiBackCompat = false;&lt;/script&gt;
&lt;script src=".../jquery-ui.js"&gt;&lt;/script&gt;
</code></pre>

<h2 id="nieuwe-functies"><a href="#nieuwe-functies" class="section-link">&#61544;</a>Nieuwe functies</h2>

<p>En natuurlijk zijn er ook een aantal functies toegevoegd:</p>

<h3 id="menu"><a href="#menu" class="section-link">&#61544;</a><a href="http://jqueryui.com/menu/">Menu</a></h3>

<p>De Menu API zat al in de vorige versie, maar hij was verborgen. Vanaf 1.9 is
hij makkelijk te vinden en te gebruiken en wordt hij ook gedocumenteerd.</p>

<h3 id="spinner"><a href="#spinner" class="section-link">&#61544;</a><a href="http://jqueryui.com/spinner">Spinner</a></h3>

<p>HTML5 leverde een <code>&lt;input type=number&gt;</code> type waarde. Dit is de JavaScript
versie daarvan voor browsers die dit nog niet ondersteunen.</p>

<h3 id="tooltip"><a href="#tooltip" class="section-link">&#61544;</a><a href="http://jqueryui.com/tooltip">Tooltip</a></h3>

<p>De tooltip is iets wat makkelijk zelf te bouwen is, maar jQuery UI heeft deze
zelfgebouwde versies verbeterd tot het maximum met vele handige extra&Acirc;&#146;s.</p>

<h2 id="documentatie-website"><a href="#documentatie-website" class="section-link">&#61544;</a>Documentatie website</h2>

<p>Een minpunt van jQuery UI was altijd de ontbrekende documentatie. Sinds 1.9
heeft jQuery UI eindelijk een documentatie die te bereiken is op
<a href="http://api.jqueryui.com/">api.jqueryui.com</a></p>

<h2 id="nieuwe-website"><a href="#nieuwe-website" class="section-link">&#61544;</a>Nieuwe website</h2>

<p>Ook het design van de jqueryui website zelf is vernieuwd, het is zelfs
responsive gemaakt. Dit alles voor een betere gebruikersvriendelijkheid, een
woord dat centraal staat in deze update.</p>

<h2 id="verdere-veranderingen"><a href="#verdere-veranderingen" class="section-link">&#61544;</a>Verdere veranderingen</h2>

<p>Natuurlijk is er nog veel meer veranderd, lees nu
<a href="http://jqueryui.com/upgrade-guide/1.9/">de upgrade guide</a> voor alle informatie
hoe je je jQuery UI 1.8 scripts kunt omzetten in 1.9.</p></body></html>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[CSS bleeding edge: Sticky Positioneren]]></title>
            <link href="http://wouterj.nl/2012/08/css-bleeding-edge-sticky-positioneren"/>
            <updated>2012-08-31T00:00:00+00:00</updated>
            <id>http://wouterj.nl/2012/08/css-bleeding-edge-sticky-positioneren</id>
            <content type="html"><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body><p class="post__intro">Vandaag bespreek ik een echte bleeding edge: Er is nog geen specificatie voor
en het is gister beland in de alpha channel van Chrome.</p><div class="cf"></div>

<h2 id="chrome-canary-of-webkit-nightly"><a href="#chrome-canary-of-webkit-nightly" class="section-link">&#61544;</a>Chrome Canary of Webkit Nightly</h2>

<p>Om deze blogpost live te kunnen uittesten en om de demo te kunnen bekijken heb
je Chrome Canary nodig. Dit is een versie van Chrome die je naast je stable of
dev. versie kunt draaien. Het is het alpha kanaal met elke dag de nieuwste
updates.</p>

<p>Ga naar <a href="https://tools.google.com/dlpage/chromesxs/">deze pagina</a> om Chrome
Canary te downloaden.</p>

<p>Je kan ook <a href="http://nightly.webkit.org/">webkit nightly</a> downloaden.</p>

<h2 id="het-probleem-in-flow-en-fixed"><a href="#het-probleem-in-flow-en-fixed" class="section-link">&#61544;</a>Het probleem: In-flow en fixed</h2>

<p>Elk element is standard in-flow: Het gaat mee met de flow van de pagina. Maar
aan de hand van positionering kun je een element uit de flow halen en er wat
leuks mee doen. Met bijv. absoluut positioneren kun je een element een vaste
plek geven, aan de hand van de eerste relative parent, wat vaak het body
element is.</p>

<p>Fixed positioneren kennen we al een tijdje. Hiermee geef je een element een
vaste positie op het scherm en die positie die blijft als je scrolld. Hij zal
dus nooit veranderen, zie ook <a href="http://wouterj.nl/demos/position-sticky/fixed.html">deze demo</a>.</p>

<p>Maar nu hebben we het probleem dat we soms in-flow en fixed willen combineren.
We willen het element gewoon een plek geven in de content, maar zodra hij
dreigt te verwijderen moet hij fixed zijn. Een voorbeeld kun je op
<a href="https://news.google.com/">Google Nieuws</a> zien. Het menu aan de linkerkant
staat eerst leuk in de flow, maar zodra hij dreigt te verdwijnen wordt hij
fixed.</p>

<h2 id="de-oude-oplossing-javascript-scroll-events"><a href="#de-oude-oplossing-javascript-scroll-events" class="section-link">&#61544;</a>De oude oplossing: JavaScript scroll events</h2>

<p>Om dit voor elkaar te krijgen gebruikte men JavaScript, om precies te zijn het
scroll event. Deze wordt per pixel dat je naar beneden gaat aangeroepen.
Doormiddel van een simpele if kun je dan kijken of de pagina al zover naar
beneden is dat het element gaat verdwijnen. Dan maak je zo'n element fixed.</p>

<h3 id="niet-ideaal"><a href="#niet-ideaal" class="section-link">&#61544;</a>Niet ideaal</h3>

<p>Het grote nadeel is dat je hiermee per pixel dat je scroll een javascript
functie laat uitvoeren. Dit maakt het scrollen wat schokkerig en geeft je niet
de scroll ervaring die je hoort te hebben. Je moet zoveel mogelijk van scroll
events afblijven.</p>

<h2 id="de-nieuwe-oplossing-css-sticky"><a href="#de-nieuwe-oplossing-css-sticky" class="section-link">&#61544;</a>De nieuwe oplossing: CSS sticky</h2>

<p>Simon Fraser had dit probleem ook en dacht: Kan CSS me niet helpen? Dus hij
<a href="https://bugs.webkit.org/show_bug.cgi?id=95146">vroeg een feature aan bij webkit</a>.
Tevens vroeg
<a href="http://lists.w3.org/Archives/Public/www-style/2012Jun/0627.html">iemand aan w3c</a>
of die er een specificatie voor konden maken, zodat andere browsers het ook
konden implementeren. Maar zoiets kost tijd, en de specificatie is er nu nog
niet (ook niet een editors draft).</p>

<p>Het Webkit team is gelukkig wel snel en
<a href="http://trac.webkit.org/changeset/126774">het is zojuist beland in de webkit alpha versie</a>.</p>

<h3 id="laten-we-wat-gaan-testen"><a href="#laten-we-wat-gaan-testen" class="section-link">&#61544;</a>Laten we wat gaan testen</h3>

<p>Het is heel simpel om te gebruiken. Je definieert eerst dat het <code>position:
sticky;</code> is, merk op dat dit momenteel nog prefixed is. Tevens moet je
defini&Atilde;&laquo;ren wanneer hij moet vastplakken. In dit geval zeggen we dat als hij
niet meer <code>10px</code> vanaf de bovenkant van de pagina is hij fixed moet
worden.</p>

<pre class="prettyprint  linenums  lang-css"><code class="css">#element {
    position: -webkit-sticky;
    position: -moz-sticky;
    position: -ms -sticky;
    position: -o -sticky;
    position: sticky;
    top: 10px;
}
</code></pre>

<p>En we zijn klaar!</p>

<p>Nu hoor ik je denken, waarom al die prefixen als het alleen in webkit werkt? Je
wilt natuurlijk dat als een browser het support, met prefix of niet, hij meteen
werk. Daarom denk je alvast vooruit en zorg je dat de prefixen er al staan.
Mijn verwachting is dat Mozilla snel gaat komen met hun sticky, aangezien
webkit en Mozilla elkaar vaak wel snel volgen en soms zelf dingen samen doen.
MicroSoft en Opera zullen wel wachten op de specificaties. Maar nogmaals: dat
zijn mijn verwachtingen.</p>

<h2 id="een-demo"><a href="#een-demo" class="section-link">&#61544;</a>Een demo</h2>

<p>Om het te demonstreren heb ik
<a href="http://wouterj.nl/demos/position-sticky/sticky.html">een simpele demo</a>
gemaakt, let wel op of je in een browser zit dat het ondersteund!</p></body></html>
]]></content>
        </entry>
    </feed>